
---
title: "Biostat 203B Homework 3"
subtitle: Due Mar 1 @ 11:59PM
author: YOUR NAME and UID
format:
  html:
    theme: cosmo
    number-sections: true
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information:
```{r}
sessionInfo()
```

Load database libraries and the tidyverse frontend:
```{r}
rm(list = ls())

# detach("package:dbplyr", unload=TRUE)
# detach("package:bigrquery", unload=TRUE)

# install.packages("DBI")
library(DBI)
library(lubridate)
library(tidyverse)
library(DBI)
library(RSQLite)

con = dbConnect(RSQLite::SQLite(), "employee.sqlite")
con = dbConnect(RSQLite::SQLite(), ":memory:")
str(con)


```

I found the current versions of bigrquery (v1.4.1) and dbplyr (v2.3.0) don't work well together on my computer ([Issue](https://github.com/r-dbi/bigrquery/issues/509)). If you encounter similar issues, you can install older versions of the these two packages.
```{r}
#| eval: false
# install.packages("devtools")
library(devtools)
# install_version("bigrquery", version = "1.4.0")
# install_version("dbplyr", version = "2.1.1")
library(dbplyr)
library(bigrquery)
```


```{r}
# too many issues with big query all of a sudden
# internet also could be an issue

# install_version("dbplyr", version = "2.1.1")
library(dbplyr)

# install_version("bigrquery", version = "1.4.0")
library(bigrquery)

```


## Q1. Compile the ICU cohort in HW2 from the Google BigQuery database 

Below is an outline of steps.

1. Load the GCP BigQuery service account token. Please place the service account token (available at BruinLearn) at your MIMIC data folder: `~/mimic/biostat-203b-2022winter-3fdc2392ac39.json`.
```{r}
# path to the service account token 
satoken <- "~/mimic/biostat-203b-2023winter-3fdc2392ac39.json"
# BigQuery authentication using service account
bq_auth(
  path = satoken,
  email = "mimiciv-bigquery@biostat-203b-2023winter.iam.gserviceaccount.com",
  scopes = c("https://www.googleapis.com/auth/bigquery",
  "https://www.googleapis.com/auth/cloud-platform")
)

```

1. Connect to BigQuery database `mimic4_v1_0_203b` in GCP (Google Cloud Platform), using the billing account `biostat-203b-2022winter`.
```{r}
# Connect to the BigQuery database `biostat-203b-2022winter.mimic4_v1_0_203b`
con <- dbConnect(
    bigrquery::bigquery(),
    project = "biostat-203b-2022winter",
    dataset = "mimic4_v1_0_203b",
    billing = "biostat-203b-2022winter"
)
con
```

2. List all tables in the `mimic4_v1_0_203b` database.
```{r}
dbListTables(con)

# query <- "SELECT COUNT(*) FROM mytable"
# result <- dbGetQuery(con, query)
```

3. Connect to the `icustays` table.
```{r}
# full ICU stays table

icustays_tble <- tbl(con, "icustays") %>%
  show_query() %>%
  print(width = Inf)
  
```
We only keep the first ICU stay. Following code is kind of a hack, using the `summarise_all(min)` function. It seems that `slice_min()`, `slice_head()`, `distinct(, .keep_all = TRUE)` don't work with `dbplyr`+`bigrquery` at the moment.
```{r}
icustays_tble <- icustays_tble %>% 
  select(subject_id, intime) %>% 
  group_by(subject_id) %>% 
  summarise_all(min) %>%
  left_join(icustays_tble, by = c("subject_id", "intime")) %>%
  show_query() %>%
  print(width = Inf)
```


4. Connect to the `admissions` table and only keep the patients who have a match in `icustays_tble` (according to `subject_id` and `hadm_id`).
```{r}
# # TODO
admissions_tble <- tbl(con, "admissions") %>%
  show_query() %>%
  print(width = Inf)

admissions_tble <- admissions_tble %>% 
  select(subject_id, hadm_id, admittime, dischtime, deathtime, admission_type, insurance, ethnicity) %>% 
  group_by(subject_id) %>% 
  summarise_all(min) %>%
  semi_join(icustays_tble, by = c("subject_id", "hadm_id")) %>%
  show_query() %>%
  print(width = Inf)
```

5. Connect to the `patients` table and only keep the patients who have a match in `icustays_tble` (according to `subject_id`).
```{r}
# # TODO
 patients_tble <- tbl(con, "patients") %>% 
  show_query() %>% 
  print(width = Inf)

patients_tble <- patients_tble %>% 
  group_by(subject_id) %>% 
  summarise_all(min) %>% 
  semi_join(icustays_tble, by = "subject_id") %>% 
  show_query() %>% 
  print(width = Inf)
```

6. Connect to the `labevents` table and retrieve a subset that only contain subjects who appear in `icustays_tble` and the lab items listed in HW2. 
```{r}
# # TODO
 labevents_tble <- tbl(con, "labevents") %>% 
  show_query() %>% 
  print(width = Inf)

labevents_tble <- labevents_tble %>% 
  select(subject_id, hadm_id, itemid, charttime, valuenum) %>% 
  filter(itemid %in% c(50912 , 50971, 50983, 50902, 50882, 51221, 51301, 50931)) %>% 
  semi_join(icustays_tble, by = "subject_id") %>% 
  show_query %>% 
  print(width = Inf)

```

Only keep the first lab measurements during ICU stay and pivot lab items to become variables/columns.
```{r}
# # TODO
library(tidyr)

labevents_tble <- labevents_tble %>% 
  select(itemid, subject_id, valuenum, charttime) %>% 
  left_join(icustays_tble, by = "subject_id") %>% 
  filter(intime <= charttime & charttime <= outtime) %>% 
  group_by(subject_id, itemid) %>% 
  summarise_all(min) %>%
  ungroup() %>% 
  select(-c(intime, outtime, charttime, hadm_id, first_careunit, last_careunit, los, stay_id)) %>% 
  pivot_wider(names_from = itemid,
              values_from = valuenum,
              names_prefix = "new") %>% # this is where the error is coming from
  # it has to do with itemids so I can try to rename them and see if that works
  rename(Creatinine = 'new50912',
         Potassium = 'new50971',
         Sodium = 'new50983',
         Chloride = 'new50902',
         Bicarbonate = 'new50882',
         Hematocrit = 'new51221',
         WBC = 'new51301',
         Glucose = 'new50931') %>% 
  show_query %>% 
  print(width = Inf)


```

7. Connect to `chartevents` table and retrieve a subset that only contain subjects who appear in `icustays_tble` and the chart events listed in HW2.
```{r}
# # TODO
chartevents_tble <- tbl(con, "chartevents") %>% 
  show_query() %>% 
  print(width = Inf)

chartevents_tble <-  chartevents_tble %>% 
  select(subject_id, stay_id, itemid,  valuenum, charttime) %>% 
  filter(itemid %in% c(220045, 220181, 220179, 223761, 220210)) %>% 
  semi_join(icustays_tble, by = "subject_id") %>% 
  print (width = Inf)
  
```



Only keep the first chart events during ICU stay and pivot chart events to become variables/columns.
```{r}
# # TODO
chartevents_tble <- chartevents_tble %>% 
  left_join(icustays_tble, by = "stay_id") %>% 
  filter(intime <= charttime & charttime <= outtime) %>% 
  group_by(subject_id_x, itemid) %>% 
  summarise_all(min) %>% 
  ungroup() %>% 
  select(-c(subject_id_y, 
            intime, 
            outtime, 
            charttime, 
            hadm_id, 
            first_careunit, 
            last_careunit, 
            los, 
            stay_id)) %>% 
  pivot_wider(names_from = itemid,
              values_from = valuenum,
              names_prefix = "new") %>% 
  rename(Heart_rate = 'new220045',
         Diastolic_BP = 'new220181',
         Systolic_BP = 'new220179',
         Temperature = 'new223761',
         Resp_rate = 'new220210',
         subject_id = 'subject_id_x') %>% 
  show_query %>% 
  print(width = Inf)
```

8. Put things together. This step is similar to Q7 of HW2. Using one chain of pipes `%>%` to perform following data wrangling steps: (i) start with the `icustays_tble` for the first ICU stay of each unique patient, (ii) merge in admissions and patients tables, (iii) keep adults only (age at admission >= 18), (iv) merge in the labevents and chartevents tables, (v) create an indicator for 30-day mortality, (vi) save the final tibble to an `icu_cohort.rds` R data file in the `mimiciv_shiny` folder.

```{r}
# make a directory mimiciv_shiny
if (!dir.exists("mimiciv_shiny")) {
  dir.create("mimiciv_shiny")
}
```

```{r}
# # TODO
library(purrr) # to use the function reduce
library(lubridate)
library(DBI)

cohort1_df <- list(
  icustays_tble, 
  admissions_tble, 
  patients_tble, labevents_tble, 
  chartevents_tble) %>% 
  reduce(left_join, by = "subject_id") %>% 
  mutate(age = year(admittime) - anchor_year + anchor_age) %>% 
  # Create a new variable to calculate age because of date shifting
  filter(age > 18) %>% 
  show_query() %>% 
  print(width = Inf)

# there was an issue with the difftime function so I decided to edit my code

cohort1_df2 <- cohort1_df %>%
  mutate(duration = timestamp_diff(dischtime, admittime, DAY)) %>% 
  collect() %>% 
  print(width = Inf)

mimic_icu_cohort <-  cohort1_df2 %>%
  mutate(thirty_day_mort = if_else(duration < 30, 'True', 'False')) %>% 
  collect %>% 
  print(width = Inf)

 # saving as a tibble
saveRDS(object = mimic_icu_cohort, file = file.path("/Users/saanchishah/biostat-203b-2023-winter/hw3/mimiciv_shiny", 'icu_cohort.rds'))

```


Close database connection and clear workspace.
```{r, eval=F}
dbDisconnect(con)
rm(list = ls())
```

## Q2. Shiny app

Develop a Shiny app for exploring the ICU cohort data created in Q1. The app should reside in the `mimiciv_shiny` folder. The app should provide easy access to the graphical and numerical summaries of variables (demographics, lab measurements, vitals) in the ICU cohort.

```{r}

library(shiny)

icu_cohort <- readRDS(file = file.path("/Users/saanchishah/biostat-203b-2023-winter/hw3/mimiciv_shiny", 'icu_cohort.rds'))

head(icu_cohort, n = 5)
icu_cohort_new <- icu_cohort %>% 
  mutate(thirty_day_mortality = if_else(duration < 30, 1, 0)) %>% 
  select(subject_id, stay_id, first_careunit, last_careunit, los, admission_type, 
         insurance, gender, ethnicity, Sodium, Chloride, WBC, Hematocrit, Glucose, 
         Bicarbonate, Creatinine, Potassium, age, thirty_day_mortality, Systolic_BP, 
         Diastolic_BP, Resp_rate, Heart_rate, Temperature)

head(icu_cohort_new, n = 5)

ui <- fluidPage(titlePanel("Saanchi's ICU cohort"),
  # Sidebar layout with a input and output definitions ----
  sidebarLayout(
    sidebarPanel(
      selectInput(inputId = "dataset",
                  label = "Choose a dataset:",
                  choices = "icu_cohort_new"),
      numericInput(inputId = "obs",
                   label = "Number of observations to view:",
                   value = 10)
                   ),
    mainPanel(
      verbatimTextOutput("summary"),
      tableOutput("view"))
    )
  )


# Define server logic to summarize and view selected dataset ----

# define server

server <- function(input, output) {
  # Return the requested dataset ----
  datasetInput <- reactive({
    switch(input$dataset,
           "icu_cohort" = icu_cohort)
  })

  # Generate a summary of the dataset ----
  output$summary <- renderPrint({
    dataset <- datasetInput()
    summary(dataset)
  })

  # Show the first "n" observations ----
  output$view <- renderTable({
    head(datasetInput(), n = input$obs)
  })

}

shinyApp(ui, server)

```



```{r}
# New UI - testing out different variables in here

ui <- fluidPage(titlePanel("Saanchi's ICU cohort"),
  # Sidebar layout with a input and output definitions ----
  sidebarLayout(
    sidebarPanel(
      selectInput(inputId = "Variable",
                  label = "Variable",
                  choices = c("Hematocrit" = "icu_cohort_new$Hematocrit",
                              "Chloride" = "icu_cohort_new$Chloride",
                              "Sodium" = "icu_cohort_new$Sodium",
                              "Potassium" = "icu_cohort_new$Potassium",
                              "WBC" = "icu_cohort_new$WBC",
                              "Glucose" = "icu_cohort_new$Glucose",
                              "Creatinine" ="icu_cohort_new$Creatinine",
                              "Bicarbonate" = "icu_cohort_new$Bicarbonate",
                              "gender" = "icu_cohort_new$gender",
                              "insurance" = "icu_cohort_new$insurance",
                              "ethnicity" = "icu_cohort_new$ethnicity",
                              "age" = "icu_cohort_new$age",
                              "Systolic_BP" = "icu_cohort_new$Systolic_BP",
                              "Diastolic_BP" = "icu_cohort_new$Diastolic_BP",
                              "Resp_rate" = "icu_cohort$Resp_rate",
                              "Heart_rate" = "icu_cohort_new$Heart_rate",
                              "Temperature" = "icu_cohort_new$Temperature",
                              "admission_type" = "icu_cohort_new$admission_type")),
      selectInput("indicator", "Indicator:",
            choices = c("0", "not 0")),
      numericInput(inputId = "obs",
                   label = "Number of observations to view:",
                   value = 10)
                   ),
    mainPanel(
      h2("Numerical and Graphical Summary"),
      verbatimTextOutput("summary"),
      tableOutput("view")
      )
    )
  )



# new server 
server <- function(input, output) {
  # Return the requested dataset ----
  datasetInput <- reactive({
    switch(input$Variable,
           "icu_cohort_new$Hematocrit" = icu_cohort_new$Hematocrit,
           "icu_cohort_new$Chloride" = icu_cohort_new$Chloride,
           "icu_cohort_new$Sodium" = icu_cohort_new$Sodium,
           "icu_cohort_new$Potassium" = icu_cohort_new$Potassium,
           "icu_cohort_new$WBC" = icu_cohort_new$WBC,
           "icu_cohort_new$Glucose" = icu_cohort_new$Glucose,
           "icu_cohort_new$Creatinine" =icu_cohort_new$Creatinine,
           "icu_cohort_new$Bicarbonate" = icu_cohort_new$Bicarbonate,
           "icu_cohort_new$gender" = icu_cohort_new$gender,
           "icu_cohort_new$insurance" = icu_cohort_new$insurance,
           "icu_cohort_new$ethnicity" = icu_cohort_new$ethnicity,
           "icu_cohort_new$age" = icu_cohort_new$age,
           "icu_cohort_new$Systolic_BP" = icu_cohort_new$Systolic_BP,
           "icu_cohort_new$Diastolic_BP" = icu_cohort_new$Diastolic_BP,
           "icu_cohort_new$Resp_rate" = icu_cohort$Resp_rate,
           "icu_cohort_new$Heart_rate" = icu_cohort_new$Heart_rate,
           "icu_cohort_new$Temperature" = icu_cohort_new$Temperature,
           "icu_cohort_new$admission_type" = icu_cohort_new$admission_type
           )
  })

  # select(subject_id, stay_id, first_careunit, last_careunit, los, admission_type, 
  # insurance, gender, ethnicity, Sodium, Chloride, WBC, Hematocrit, Glucose, 
  # Bicarbonate, Creatinine, Potassium, age, thirty_day_mort, Systolic_BP, 
  # Diastolic_BP, Resp_rate, Heart_rate, Temperature)
  
  
  # Generate a summary of the dataset ----
  output$summary <- renderPrint({
    dataset <- datasetInput()
    summary(dataset)
  })

  # Show the first "n" observations ----
  output$view <- renderTable({
    head(datasetInput(), n = input$obs)
  })

}

shinyApp(ui, server)

```



#maybe this will work to set 30daymort
```{r}

head(icu_cohort_new, n =5)

ui <- fluidPage(titlePanel("Saanchi's ICU cohort"),
  # Sidebar layout with a input and output definitions ----
  sidebarLayout(
    sidebarPanel(
      selectInput(inputId = "Variable",
                  label = "Variable",
                  choices = c("Hematocrit" = "icu_cohort_new$Hematocrit",
                              "Chloride" = "icu_cohort_new$Chloride",
                              "Sodium" = "icu_cohort_new$Sodium",
                              "Potassium" = "icu_cohort_new$Potassium",
                              "WBC" = "icu_cohort_new$WBC",
                              "Glucose" = "icu_cohort_new$Glucose",
                              "Creatinine" ="icu_cohort_new$Creatinine",
                              "Bicarbonate" = "icu_cohort_new$Bicarbonate",
                              "gender" = "icu_cohort_new$gender",
                              "insurance" = "icu_cohort_new$insurance",
                              "ethnicity" = "icu_cohort_new$ethnicity",
                              "age" = "icu_cohort_new$age",
                              "Systolic_BP" = "icu_cohort_new$Systolic_BP",
                              "Diastolic_BP" = "icu_cohort_new$Diastolic_BP",
                              "Resp_rate" = "icu_cohort$Resp_rate",
                              "Heart_rate" = "icu_cohort_new$Heart_rate",
                              "Temperature" = "icu_cohort_new$Temperature",
                              "admission_type" = "icu_cohort_new$admission_type",
                              "thirty_day_mortality" = "thirty_day_mortality")),
      selectInput("indicator", "Indicator:",
            choices = c("0", "1")),
      numericInput(inputId = "obs",
                   label = "Number of observations to view:",
                   value = 10)
                   ),
    mainPanel(
      h2("Numerical and Graphical Summary"),
      verbatimTextOutput("summary"),
      tableOutput("view")
      )
    )
  )



# new server 
server <- function(input, output) {
  # Return the requested dataset ----
  datasetInput <- reactive({
    switch(input$Variable,
           Hematocrit = icu_cohort_new$Hematocrit,
           Chloride = icu_cohort_new$Chloride,
           Sodium = icu_cohort_new$Sodium,
           Potassium = icu_cohort_new$Potassium,
           WBC = icu_cohort_new$WBC,
           Glucose = icu_cohort_new$Glucose,
           Creatinine =icu_cohort_new$Creatinine,
           Bicarbonate = icu_cohort_new$Bicarbonate,
           gender = icu_cohort_new$gender,
           insurance = icu_cohort_new$insurance,
           ethnicity = icu_cohort_new$ethnicity,
           age = icu_cohort_new$age,
           Systolic_BP = icu_cohort_new$Systolic_BP,
           Diastolic_BP = icu_cohort_new$Diastolic_BP,
           Resp_rate = icu_cohort_new$Resp_rate,
           Heart_rate = icu_cohort_new$Heart_rate,
           Temperature = icu_cohort_new$Temperature,
           admission_type = icu_cohort_new$admission_type
           )
  })

output$view <- renderTable({
    if(input$Variable %in% names(icu_cohort_new)){
      data <- datasetInput()
      if(input$indicator == "0"){
        data %>% 
          group_by_(input$Variable) %>% 
          summarize(n = n()) %>% 
          mutate(prop = n/sum(n))
      } else {
        data %>% 
          group_by_(!!sym(input$Variable), "thirty_day_mortality") %>% 
          summarize(n = n()) %>% 
          mutate(prop = n/sum(n)) %>% 
          select(-n) %>% 
          spread("thirty_day_mortality", prop)
      }
    }
  })

}

shinyApp(ui, server)
```





```{r}
# test out plots for some other variables
library(dplyr)

icu_cohort <- icu_cohort %>% 
  mutate(thirty_day_mort = if_else(thirty_day_mort == TRUE, 1, 0))

ui <- fluidPage(

  # App title ----
  titlePanel("Saanchi's icu cohort"),

  # Sidebar layout with input and output definitions ----
  sidebarLayout(

    # Sidebar panel for inputs ----
    sidebarPanel(

      # Input: Selector for variable to plot against mpg ----
      selectInput("variable", "Variable:",
                  choices = c(Hematocrit = "Hematocrit" ,
                              Chloride = "Chloride" ,
                              Sodium = "Sodium")),


      # Input: Checkbox for whether outliers should be included ----
      checkboxInput("outliers", "Show outliers", TRUE)

    ),

    # Main panel for displaying outputs ----
    mainPanel(

      # Output: Formatted text for caption ----
      h3(textOutput("caption")),

      # Output: Plot of the requested variable against mpg ----
      plotOutput("mortPlot")

    )
  )
)


server <- function(input, output) {

  # Compute the formula text ----
  # This is in a reactive expression since it is shared by the
  # output$caption and output$mpgPlot functions
  formulaText <- reactive({
    paste("thirty_day_mort ~", input$variable)
  })

  # Return the formula text for printing as a caption ----
  output$caption <- renderText({
    formulaText()
  })

  

  # Generate a plot of the requested variable against mpg ----
  # and only exclude outliers if requested
  output$mortPlot <- renderPlot({
    formula <- as.formula(paste("thirty_day_mort ~", input$variable)) # I am not getting box plots, help
    boxplot(formula, data = icu_cohort, outline = input$outliers)
  })
}



shinyApp(ui, server)

```

```{r}
server <- function(input, output) {
  output$boxplot <- renderPlot({
    formula <- as.formula(paste("thirty_day_mort ~", input$variable))
    boxplot(formula, data = icu_cohort, outline = input$outliers)
  })
}
```



tomoki's code

```{r}
server <- function(input, output){
  output$table <- renderTable({
    if(input$var %in% icu_cohort_new){
      if(input$indicator == 0){
        data %>% 
          group_by_(input$var) %>% 
          summarize(n = n()) %>% 
          mutate(prop = n/sum(n))
      } else {
        data %>% 
          group_by_("thirty_day_mort", input$var) %>% 
          summarize(n = n()) %>% 
          select(-n) %>% 
          spread("thirty_day_mort", prop)
      }
      }
      }
    }
  })
}


````
